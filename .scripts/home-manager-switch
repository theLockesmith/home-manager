#! /bin/sh

# Set default system as server as it will cause less problems if the assumption is incorrect.
SYSTEM="server"
BACKUP=true
DAEMON_FLAG=false
NO_DAEMON_FLAG=false
DAEMON=true
OPTIONAL_PACKAGES=0
DESKTOP_PACKAGES=0
SERVER_PACKAGES=0
REINSTALL=0

# Optional packages
INCLUDE_FIREFOX=0
INCLUDE_EXODUS=0

# Define color codes
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
RESET="$(tput sgr0)"  # Reset color to default

usage() {
  echo "${YELLOW} Usage:
$0
--desktop       Run the installer for a desktop environment (default)
--server        Run the installer for a server environment
--daemon        Passes --daemon to NixOS installer (default)
--no-daemon     Passes --no-daemon to NixOS installer
--no-backup     Installer backs up dotfiles in your home directory by default. Use this flag to disable backups of dotfiles. *It is not advised to use 
--firefox       Installs Firefox. This is currently not done by default because of missing PWA support in nix package.
${RESET}" >&2
  exit 1
}

# Parse long options
while [ "$#" -gt 0 ]; do
  case $1 in
    '--desktop')
      SYSTEM="desktop"
      export DESKTOP_PACKAGES=1
      ;;
    '--server')
      SYSTEM="server"
      export SERVER_PACKAGES=1
      ;;
    '--daemon')
      DAEMON_FLAG=true
      DAEMON=true
      ;;
    '--no-daemon')
      NO_DAEMON_FLAG=true
      DAEMON=false
      ;;
    '--no-backup')
      BACKUP=false
      ;;
    '--firefox')
      export INCLUDE_FIREFOX=1
      ;;
    '--exodus')
      export INCLUDE_EXODUS=1
      ;;
    '--reinstall')
      export REINSTALL=1
      ;;
    '--help')
      usage
      ;;
    *)
      echo "*${RED}Unknown option: $1${RESET}* " >&2
      usage
      ;;
  esac
  shift
done

if test "$DESKTOP_PACKAGES" = 1 && test "$SERVER_PACKAGES" = 1; then
  echo "${RED} *Options --desktop and --server cannot be used together. Please select one or the other.* ${RESET}"
  exit 1
fi

if $DAEMON_FLAG && $NO_DAEMON_FLAG; then
  echo "${RED} *Options --daemon and --no-daemon cannot be used together. Please select one or the other.* ${RESET}"
  exit 1
fi

NEWLINE=$'\n'

echo "${GREEN} *Creating necessary directories.* ${RESET}"
# Make sure required directories exist
mkdir -p $HOME/.config/fontconfig/conf.d/ > /dev/null 2>&1
mkdir -p $HOME/.config/home-manager/ > /dev/null 2>&1
mkdir -p $HOME/.local/share/fonts/ > /dev/null 2>&1

if ! command -v nix > /dev/null 2>&1; then
  echo "${GREEN} *Nix not detected. Installing now.* ${RESET}"
  sudo \rm -rf /etc/bash.bashrc.backup-before-nix
  sudo \rm -rf /etc/bashrc.backup-before-nix
  sudo \rm -rf /etc/profile.d/nix.sh.backup-before-nix
  sudo \rm -rf /etc/zshrc.backup-before-nix
  # Install Nix if not already installed
  if $DAEMON; then
    echo "${GREEN} *Starting Nix system-level install.* ${RESET}"
    curl -L https://nixos.org/nix/install | sh -s -- --daemon --yes
  else
    echo "${GREEN} *Starting Nix user-level install.* ${RESET}"
    curl -L https://nixos.org/nix/install | sh -s -- --no-daemon --yes
  fi
  sleep 2

  echo "${GREEN} *Sourcing nix.sh.* ${RESET}"
  . /etc/profile.d/nix.sh
else
  echo "${GREEN} *Nix is already installed. Skipping.* ${RESET}"
fi

# Wipe Home Manager entirely. This may be extreme so I'm giong to add it and leave it as a comment.
# Uncomment if just removing the two install directories isn't enough on reinstall/updates.
: '
if command -v home-manager > /dev/null 2>&1; then
  home-manager uninstall
fi
'
if test "$REINSTALL" = 1 ; then
  \rm -f $HOME/.config/nixpkgs/
  \rm -f $HOME/.nix-profile/
  \rm -f /home/forgemaster/.local/state/nix/profiles/home-manager*
  \rm -f /home/forgemaster/.local/state/home-manager/gcroots/current-home
  if command -v nix-collect-garbage > /dev/null 2>&1; then
    nix-collect-garbage -d
  fi
fi

echo "${GREEN} *Adding Home Manager Nix channel.* ${RESET}"
# Install Home Manager
nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
nix-channel --update

# If $BACKUP set to true, backup dotfiles in home directory
if $BACKUP; then
  echo "${GREEN} *Backing up dotfiles.* ${RESET}"
  tar -czvf $HOME/dotfiles-$(date +"%Y-%m-%d_%H-%M-%S").tar.gz \
    $( [ -f $HOME/.bashrc ] && echo "$HOME/.bashrc" ) \
    $( [ -f $HOME/.profile ] && echo "$HOME/.profile" ) \
    $( [ -f $HOME/.scripts ] && echo "$HOME/.scripts" ) \
    $( [ -f $HOME/.zshrc ] && echo "$HOME/.zshrc" ) \
    $( [ -f $HOME/.bash_profile ] && echo "$HOME/.bash_profile" ) \
    $( [ -f $HOME/.config/neofetch ] && echo "$HOME/.config/neofetch" ) \
    $( [ -f $HOME/.vimrc ] && echo "$HOME/.vimrc" ) \
    $( [ -f $HOME/.vim ] && echo "$HOME/.vim" ) > /dev/null 2>&1
fi

# Delete whatever is left
\rm -rf $HOME/.bashrc > /dev/null 2>&1
\rm -rf $HOME/.profile > /dev/null 2>&1
\rm -rf $HOME/.scripts > /dev/null 2>&1
\rm -rf $HOME/.zshrc > /dev/null 2>&1
\rm -rf $HOME/.bash_profile > /dev/null 2>&1
\rm -rf $HOME/.config/neofetch > /dev/null 2>&1
\rm -rf $HOME/.vimrc > /dev/null 2>&1
\rm -rf $HOME/.vim > /dev/null 2>&1
\rm -rf $HOME/.zshrc > /dev/null 2>&1
\rm -rf $HOME/.scripts > /dev/null 2>&1

cur_dir=$(pwd)
cd $HOME/.config/home-manager

# Checking for .git because home-manager gets created when home manager is installed.
REPO="https://github.com/theLockesmith/home-manager.git"
if [ ! -d "$HOME/.config/home-manager/.git" ]; then
  echo "${GREEN} *Pulling project repository.* ${RESET}"

  # Load home
  git init
  git remote add origin $REPO
  git fetch --all
  git checkout main
  git pull origin main
  git pull origin main --recurse-submodules
  git submodule update --init --recursive
else
  # Specify the local and remote branches
  cd $HOME/.config/home-manager
  local_branch="main"
  remote_branch="origin/main"

  echo "${GREEN} *Fetching latest.* ${RESET}"
  # Fetch the latest changes from the remote repository
  git fetch

  # Get the commit hashes of the local and remote branches
  local_commit=$(git rev-parse $local_branch)
  remote_commit=$(git rev-parse $remote_branch)

  # Compare the commit hashes to determine the relationship
  if [ "$local_commit" = "$remote_commit" ]; then
    echo "${GREEN} *Local branch is up-to-date. Skipping.* ${RESET}"
  elif [ "$local_commit" = "$(git merge-base "$local_branch" "$remote_branch")" ]; then
      while true; do
      read -p "${YELLOW} *Local branch is behind the remote. Would you like to update?* ${RESET} (y/n): " response

      case "$response" in
        [Yy])
          echo "${GREEN} *Updating local repository.* ${RESET}"
          git pull origin main
          git pull origin main --recurse-submodules
          break
          ;;
        [Nn])
          echo "${GREEN} *Skipping update.* ${RESET}"
          break
          ;;
        *)
          echo "${RED} *Invalid response. Please enter 'y' or 'n'.* ${RESET}"
          ;;
      esac
    done
  else
    echo "${GREEN} *Local branch is ahead of the remote.* ${RESET}"
  fi
fi

# Collect name and email
NAME=$(git config --get user.name)
EMAIL=$(git config --get user.email)

if test -z "$NAME"  || test -z "$EMAIL"; then
  echo "${GREEN} *Collecting name and email for git config.* ${RESET}"
  echo "${GREEN} *You can leave these blank if you'd like.* ${RESET}"

  if test -z "$NAME"; then
    echo -n "Enter your name:$NEWLINE"
    read NAME
  fi

  if test -z "$EMAIL"; then
    echo -n "Enter your email:$NEWLINE"
    read EMAIL
  fi
fi

# Build nix config from templates
\cp -f $HOME/.config/home-manager/templates/home.template.nix $HOME/.config/home-manager/home.nix
\cp -f $HOME/.config/home-manager/templates/flake.template.nix $HOME/.config/home-manager/flake.nix

sed -i "s|user_placeholder|$USER|" $HOME/.config/home-manager/flake.nix > /dev/null 2>&1
sed -i "s|user_placeholder|$USER|" $HOME/.config/home-manager/home.nix > /dev/null 2>&1
sed -i "s|home_placeholder|$HOME|" $HOME/.config/home-manager/home.nix > /dev/null 2>&1
sed -i "s|name_placeholder|$NAME|" $HOME/.config/home-manager/home.nix > /dev/null 2>&1
sed -i "s|email_placeholder|$EMAIL|" $HOME/.config/home-manager/home.nix > /dev/null 2>&1

# Set experimental nix features and install home manager
export NIX_CONFIG="experimental-features = nix-command flakes"
if ! command -v home-manager > /dev/null 2>&1; then
  echo "${GREEN} *Installing Home Manager.* ${RESET}"
  nix-shell '<home-manager>' -A install
else
  echo "${GREEN} *Home Manager already exists. Skipping.* ${RESET}"
fi

# Build your home

if [ "$SYSTEM" = "desktop" ]; then
  echo "${GREEN} *Building home for desktop.* ${RESET}"
  home-manager switch -b backup --impure
elif [ "$SYSTEM" = "server" ]; then
  echo "${GREEN} *Building home for server.* ${RESET}"
  home-manager switch -b backup --impure
else
  echo "${GREEN} *No flag passed for --desktop or --server.* ${RESET}"
  echo "${GREEN} *Defaulting to build for server.* ${RESET}"
fi

# Install Cascadia Code font and powerline symbols
if ! test -f $HOME/.local/share/fonts/CaskaydiaCoveNFNerdFontMono-Regular.ttf; then
  echo "${GREEN} *Installing fonts.* ${RESET}"
  # Download
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/CascadiaCode.tar.xz
  mkdir -p ./cascadia
  tar -xvf CascadiaCode.tar.xz -C ./cascadia
  rm -f ./CascadiaCode.tar.xz
  nerd-font-patcher ./cascadia/CaskaydiaCoveNerdFont-Regular.ttf --progressbars --mono --use-single-width-glyphs --complete
  rm -rf ./cascadia
  mv ./CaskaydiaCoveNFNerdFontMono-Regular.ttf $HOME/.local/share/fonts/CaskaydiaCoveNFNerdFontMono-Regular.ttf

  # Install
  fc-cache -vf $HOME/.local/share/fonts
else
  echo "${GREEN} *Fonts already exists. Skipping.* ${RESET}"
fi

cd $cur_dir

# You're done! Start a new shell session for changes to take effect!
. /etc/profile.d/nix.sh  > /dev/null 2>&1
. $HOME/.bashrc > /dev/null 2>&1
echo "${GREEN} *Installation Complete! You free to use your new shell, however a new session, or preferably a reboot, is recommended.* ${RESET}"
