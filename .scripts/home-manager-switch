#! /bin/sh

# Set default system as server as it will cause less problems if the assumption is incorrect.
SYSTEM="server"
BACKUP=false
OPTION_D=false
OPTION_S=false
DAEMON_FLAG=false
NO_DAEMON_FLAG=false
DAEMON=true

# Define color codes
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
RESET="$(tput sgr0)"  # Reset color to default

usage() {
  echo "${YELLOW} *Usage: $0 [--desktop] [--server] [--daemon] [--no-daemon] [--no-backup]* ${RESET}" >&2
  exit 1
}

# Parse long options
while [ "$#" -gt 0 ]; do
  case $1 in
    '--desktop')
      OPTION_D=true
      SYSTEM="desktop"
      ;;
    '--server')
      OPTION_S=true
      SYSTEM="server"
      ;;
    '--daemon')
      DAEMON_FLAG=true
      DAEMON=true
      ;;
    '--no-daemon')
      NO_DAEMON_FLAG=true
      DAEMON=false
      ;;
    '--no-backup')
      BACKUP=false
      ;;
    '--help')
      usage
      ;;
    *)
      echo "$ *{RED}Unknown option: $1${RESET}* " >&2
      usage
      ;;
  esac
  shift
done

if $OPTION_D && $OPTION_S; then
  echo "${RED} *Options --desktop and --server cannot be used together. Please select one or the other.* ${RESET}"
  exit 1
fi

if $DAEMON_FLAG && $NO_DAEMON_FLAG; then
  echo "${RED} *Options --daemon and --no-daemon cannot be used together. Please select one or the other.* ${RESET}"
  exit 1
fi

NEWLINE=$'\n'

echo "${GREEN} *Creating necessary directories.* ${RESET}"
# Make sure required directories exist
mkdir -p $HOME/.config/fontconfig/conf.d/ > /dev/null 2>&1
mkdir -p $HOME/.local/share/fonts/ > /dev/null 2>&1

if ! command -v nix; then
  echo "${GREEN} *Nix not detected. Installing now.* ${RESET}"
  # Install Nix if not already installed
  if $DAEMON; then
    echo "${GREEN} *Starting Nix system-level install.* ${RESET}"
    curl -L https://nixos.org/nix/install | sh -s -- --daemon --yes
  else
    echo "${GREEN} *Starting Nix user-level install.* ${RESET}"
    curl -L https://nixos.org/nix/install | sh -s -- --no-daemon --yes
  fi
  sleep 2

  echo "${GREEN} *Sourcing nix.sh.* ${RESET}"
  . /etc/profile.d/nix.sh
else
  echo "${GREEN} *Nix is already installed. Skipping.* ${RESET}"
fi


echo "${GREEN} *Adding Home Manager Nix channel.* ${RESET}"
# Install Home Manager
nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
nix-channel --update

# If $BACKUP set to true, backup dotfiles in home directory
if $BACKUP; then
  echo "${GREEN} *Backing up dotfiles.* ${RESET}"
  if test -f $HOME/.bashrc; then
    mv -f $HOME/.bashrc $HOME/.bashrc.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.profile; then
    mv -f $HOME/.profile $HOME/.profile.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.scripts; then
    mv -f $HOME/.scripts $HOME/.scripts.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.scripts; then
    mv -f $HOME/.zshrc $HOME/.zshrc.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.bash_profile; then
    mv -f $HOME/.bash_profile $HOME/.bash_profile.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.config/neofetch; then
    mv -f $HOME/.config/neofetch $HOME/.config/neofetch.bak > /dev/null 2>&1
  fi

  if test -f $HOME/.vimrc; then
    mv -f $HOME/.vimrc $HOME/.vimrc.bak > /dev/null 2>&1
  fi
else
  echo "${GREEN} *Skipping backup of dotfiles.* ${RESET}"
fi

if [ ! -d "$HOME/.config/home-manager" ]; then
  echo "${GREEN} *Cloning project repository.* ${RESET}"
  # Load Home
  git clone --recurse-submodules https://github.com/theLockesmith/home-manager.git $HOME/.config/home-manager > /dev/null 2>&1
else
  echo "${GREEN} *Project already exists. Skipping.* ${RESET}"
fi

# Collect name and email
NAME=$(git config --get user.name)
EMAIL=$(git config --get user.email)

if test -z "$NAME"; then
  echo -n "Enter your name:${NEWLINE}"
  read NAME
fi

if test -z "$EMAIL"; then
  echo -n "Enter your email:${NEWLINE}"
  read EMAIL
fi

# Build nix files from templates
if [ $SYSTEM = "desktop" ]; then
  echo "${GREEN} *Building home for desktop.* ${RESET}"
  \cp -f $HOME/.config/home-manager/templates/flake.desktop.template.nix $HOME/.config/home-manager/flake.nix
elif [ $SYSTEM = "server" ]; then
  echo "${GREEN} *Building home for server.* ${RESET}"
  \cp -f $HOME/.config/home-manager/templates/flake.server.template.nix $HOME/.config/home-manager/flake.nix
else
  \cp -f $HOME/.config/home-manager/templates/flake.server.template.nix $HOME/.config/home-manager/flake.nix
fi
\cp -f $HOME/.config/home-manager/templates/home.template.nix $HOME/.config/home-manager/home.nix
\cp -f $HOME/.config/home-manager/templates/home-desktop.template.nix $HOME/.config/home-manager/home-desktop.nix
\cp -f $HOME/.config/home-manager/templates/home-server.template.nix $HOME/.config/home-manager/home-server.nix

sed -i "s|user_placeholder/$USER|" $HOME/.config/home-manager/flake.nix
sed -i "s|user_placeholder/$USER|" $HOME/.config/home-manager/home.nix
sed -i "s|home_placeholder|$HOME|" $HOME/.config/home-manager/home.nix
sed -i "s|name_placeholder/$NAME|" $HOME/.config/home-manager/home.nix
sed -i "s|email_placeholder/$EMAIL|" $HOME/.config/home-manager/home.nix

# Testing
head -25 $HOME/.config/home-manager/home.nix

# Set experimental nix features and install home manager
export NIX_CONFIG="experimental-features = nix-command flakes"
if ! command -v home-manager; then
  echo "${GREEN} *Installing Home Manager.* ${RESET}"
  nix-shell '<home-manager>' -A install
else
  echo "${GREEN} *Home Manager already exists. Skipping.* ${RESET}"
fi

# Build your home
echo "${GREEN} *Building your home.* ${RESET}"
home-manager switch -b backup

# Install Cascadia Code font and powerline symbols
if ! test -f $HOME/.local/share/fonts/CaskaydiaCoveNFNerdFontMono-Regular.ttf; then
  echo "${GREEN} *Installing fonts.* ${RESET}"
  # Download
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/CascadiaCode.tar.xz
  mkdir -p ./cascadia
  tar -xvf CascadiaCode.tar.xz -C ./cascadia
  rm -f ./CascadiaCode.tar.xz
  nerd-font-patcher ./cascadia/CaskaydiaCoveNerdFont-Regular.ttf --progressbars --mono --use-single-width-glyphs --complete
  rm -rf ./cascadia
  mv ./CaskaydiaCoveNFNerdFontMono-Regular.ttf $HOME/.local/share/fonts/CaskaydiaCoveNFNerdFontMono-Regular.ttf

  # Install
  fc-cache -vf $HOME/.local/share/fonts
else
  echo "${GREEN} *Fonts already exists. Skipping.* ${RESET}"
fi

# You're done! Start a new shell session for changes to take effect!
. /etc/profile.d/nix.sh  > /dev/null 2>&1
. $HOME/.bashrc > /dev/null 2>&1
echo "${GREEN} *Installation Complete! You free to use your new shell, however a new session, or preferably a reboot, is recommended.* ${RESET}"
